% This is a driver file for the EIT code.
% Run from EITcode/Matlab/CallerCode/

% This file pose as an example 

clc; clear all;

mydir = pwd;
id  = strfind(mydir,filesep);
folder = mydir(id(end)+1:end);

% navigating to /EITcode/
if strcmpi(folder,'eitcode')
    cd Matlab/CallerCode
    addpath Classes
    cd ..
    addpath CallerCode
    addpath export_fig
    cd ..
    addpath Matlab
    addpath dnmap_commands
    addpath dnmap_logs
    addpath eit_commands
    addpath eit_logs
elseif strcmpi(folder,'eitcode')
else
    error('Please, navigate to /EITcode/Matlab/CallerCode');
end

%% DNMAP %%
%%%%%%%%%%%

%% Conductivity

% Possible Classes:
        
% Moments:
%       - BallConductivity ( center , radius , amplitude , innerextent )
%       - EllipsoidConductivity ( center , radii , axes , amplitude , innerextent )
% Piecewise constant:
%       - PcBallConductivity ( center , radius , amplitude , n )
%       - PcEllipsoidConductivity ( center , radii , axes , amplitude , n )
% Radial:
%       - RadialBallConductivity ( radius , amplitude , innerextent )


%% Hearts and lung phantom
rotang=5*pi/12;

% Prolate spheroid on the right
% Center
xr0=sin(rotang)*0.45;
yr0=cos(rotang)*0.45;
zr0=0;
% Radius
rr=0.42;
% Conductivity
cr=0.5;

% Prolate spheroid on the left
xl0=-sin(rotang)*0.55;
yl0=cos(rotang)*0.55;
zl0=0;
% Smallest radius (up to the product by k)
rl=0.36;
% Conductivity
cl=0.5;

% axes
A = [cos(rotang),sin(rotang),0;-sin(rotang),cos(rotang),0;0,0,1];

% Ball
% Center
xb0=-0.09;
yb0=-0.55;
zb0=0;
% Radius
rb=0.21;
% Conductivity
cb=2;

%inner extent
innerextent = 0.01;

% Create different conductivity elements for moments
SR = EllipsoidConductivity([xr0,yr0,zr0], [1.3*rr, 0.65*rr, 0.65*rr], A', cr, innerextent);
SL = EllipsoidConductivity([xl0,yl0,zl0], [1.3*rl, 0.65*rl, 0.65*rl], A, cl, innerextent);
B1 = BallConductivity([xb0,yb0,zb0],1.3*rb,cb,innerextent);

% Create different conductivity elements for pcc
SRpc = PcEllipsoidConductivity([xr0,yr0,zr0], [1.3*rr, 0.65*rr, 0.65*rr], A', cr, 25);
SLpc = PcEllipsoidConductivity([xl0,yl0,zl0], [1.3*rl, 0.65*rl, 0.65*rl], A, cl, 25);
B1pc = PcBallConductivity([xb0,yb0,zb0],1.3*rb,cb,25);
% peabrain
peapc = PcBallConductivity([0.3,0.3,0],0.3,cb,25);
%PcBallConductivity ( center , radius , amplitude , n )
%       - PcEllipsoidConductivity ( center , radii , axes , amplitude , n )
% Collect total conductivity data
conddata_moments = MakeConductivityData(B1);
pea_pc           = MakeConductivityData(peapc);
conddata_pc      = MakeConductivityData(SRpc,SLpc,B1pc);

%% Try radial vs moments
RadialBall = RadialBallConductivity ( 0.3 , 2 , 0.01);
MomentRadialBall = BallConductivity([0,0,0],0.3,2,0.01);
conddata_moments = MakeConductivityData(MomentRadialBall);
conddata_radial  = MakeConductivityData(RadialBall);

%% Shared parameters

nd       = 5;   % >= 1
savecond = 1;   % {0,1} - save conductivity or not?
saveq    = 1;   % {0,1} - save q or not?
parallel = 1;   % {0,1} - parallelize or not?
method   = 'pcc';               % {'moments', 'radial', 'pcc'}
mesh     = 'ball_0p1_3D.msh';  % choose mesh from EITcode/mesh/ folder
silentmode = 0; % {0,1} - log update = 0, and no log update = 1.
cluster = 1;    % if 1 the program is submitted to hpc cluster


%% Parameters: Moments

n  = 7; % >= nd
nz = 7; % >= 1
nr = 7; % >= 2
nt = 7; % >= 2
saveqhat = 1; % saving qhat currently only works for parallelized moments

%% Parameters: Radial

h       = 0.001;  % (0,1)
radstep = 0.001;  % (0,1)
saveeig = 1;    % {0,1} - save eigenvalues or not?


%% Initialize 
% Open GUI and prepare files
% Only do this once for every (parallel) job
InitializeProgram('dnmap',cluster);

%%% parameters for batch %%%
%dnmapid  = 2:82;   % unique dnmap integer id number
savecond = 1;
saveq = 1;
saveqhat = 1;
nd = 25;%25
n = 20; %25
nz = 64; % h?j (60)
nr = 100; % meget h?j (100)
nt = 100; % meget h?j (100)
index = 700;

for i = 1
    % Write commands and Start
    if strcmpi(method,'moments')
        [complex, commands, log] = WriteMomentsCommandsFile(conddata_moments,nd(i),n(i),...
                                    nz(i),nr(i),nt(i),index(i),savecond,0,0,mesh);
    elseif strcmpi(method,'radial')
        [complex, commands, log] = WriteRadialCommandsFile(conddata_radial,20,h,...
                                    222,savecond,saveq,saveeig,radstep);
    elseif strcmpi(method,'pcc')
        [complex, commands, log] = WritePcCommandsFile(conddata_pc,nd,index,...
                                    savecond,saveq,mesh);
    else, error('Please choose a method');
    end

    % Start
    StartDNMAP(method, parallel, complex, commands, log, cluster);
end
% Log
LogUpdate(silentmode,conddata_moments,'dnmap');

%close all


%%  EIT  %%
%%%%%%%%%%%

%% Parameters
reconmethod = 't';
ift         = 'ifft';
ngrid       = 11; % >= 2
fixed       = 1; % {0,1} choose zeta fixed (1) or proportional (0)
pkappa      = 1; % >= 1
mesh        = 'ball_0p05_3D.msh';  % choose mesh from EITcode/mesh/ folder
butter      = [0,0]; % [N, A], where N is the order and 1/A is max stopband magnitude
dnmapid     = 12; % unique dnmap integer id number of DNMAP you use
reconid     = 80; % unique reconstruction integer id number
parallel    = 1; % {0,1} - parallelize or not?
silentmode  = 0; % {0,1} - log update = 0, and no log update = 1.
cluster = 1;

%% Initialize 
% Open GUI and prepare files
% Only do this once for every (parallel) job

InitializeProgram('eit',cluster);

% Write commands and Start

dnmapid = 700;
ngrid = [15,14,13,12,11,10,9,8,7];
truncrad = [14, 13, 12,11,10,9,8];
reconid = 401:410; 
M = pi*(ngrid-1).^2./(2*ngrid);
truncrad = M;
pkappa = M.^(1/2)*sqrt(2)/4.0195;
%maxtrunc = pi*(ngrid-1)/2;
fixed = 1;

for i = 1:3
        % Commands
        [complex, commands, log] = WriteCommandsFile(reconmethod,'ifft',ngrid(i),truncrad(i),...
                                    fixed,pkappa(i),mesh,butter,reconid(i),dnmapid);
        % Start
        StartEIT(parallel, complex, commands, log,cluster);
end

% Log 
LogUpdate(silentmode,0,'eit')

%% Initialize 
% Open GUI and prepare files
% Only do this once for every (parallel) job

InitializeProgram('eit',cluster);

% Write commands and Start
%dnmapid = 700;
dnmapid = [701,702,703,704,705];
ngrid = [11,11,11,11,11];
truncrad = [14,12.6,12,9.7,9];
M = pi*(ngrid-1).^2./(2*ngrid);
reconid = 311:316; 
pkappa = truncrad.^(1/2)/3;
%maxtrunc = pi*(ngrid-1)/2;
fixed = 1;

for i = 2
        % Commands
        [complex, commands, log] = WriteCommandsFile(reconmethod,'ifft',ngrid(i),truncrad(i),...
                                    fixed,pkappa(i),mesh,butter,reconid(i),dnmapid(i));
        % Start
        StartEIT(parallel, complex, commands, log,cluster);
end

% Log 
LogUpdate(silentmode,0,'eit')

%% Initialize 
% Open GUI and prepare files
% Only do this once for every (parallel) job

InitializeProgram('eit',cluster);

% Write commands and Start
%dnmapid = 700;
dnmapid = 701;
ngrid = [11,13];
truncrad = 13.5;
M = pi*(ngrid-1).^2./(2*ngrid);
reconid = [9001,9002]; 
pkappa = truncrad.^(1/2)./3.0822;
%maxtrunc = pi*(ngrid-1)/2;
fixed = 1;

for i = 1:2
        % Commands
        [complex, commands, log] = WriteCommandsFile(reconmethod,'ifft',ngrid(i),truncrad,...
                                    fixed,pkappa,mesh,butter,reconid(i),dnmapid);
        % Start
        StartEIT(parallel, complex, commands, log,cluster);
end

% Log 
LogUpdate(silentmode,0,'eit')
%% Initialize 
% Open GUI and prepare files
% Only do this once for every (parallel) job

InitializeProgram('eit',cluster);

% Write commands and Start

dnmapid = 700;
ngrid = [13,12,12,12,12,12,12];
truncrad = [16, 14, 12.5,11,9.5,8];
reconid = 281:286; 
M = pi*(ngrid-1).^2./(2*ngrid);
pkappa = truncrad.^(1/2)/sqrt(8);
%maxtrunc = pi*(ngrid-1)/2;
fixed = 1;

for i = 1
        % Commands
        [complex, commands, log] = WriteCommandsFile(reconmethod,'ifft',ngrid(i),truncrad(i),...
                                    fixed,pkappa(i),mesh,butter,reconid(i),dnmapid);
        % Start
        StartEIT(parallel, complex, commands, log,cluster);
end

% Log 
LogUpdate(silentmode,0,'eit')

%%  Plots  %%
%%%%%%%%%%%%%

%% Plot conductivity data 3D
type    = 'conductivity';
reconid = 235; % reconstructions 
dnmapid = 0;         % true data
xslice  = [-0.6,-0.05,0.6];    % slice vector
yslice  = [];
zslice  = 0;
h       = 0.005;       % stepsize
span    = [0.7,1.3];    % span of type
save    = 1;          % save or not


[ha, pos] = Plot3D(type, reconid, dnmapid, xslice, yslice, zslice, h, span, 0,'real');


%cb = colorbar('eastoutside','Position', [.9 .25 .03 .5]);
%cb.Ruler.Exponent = 2;
%
%%
ha.SortMethod = 'depth';
set(gcf,'color','w');
set(gcf, 'Renderer', 'painters');
export_fig '3Dtest.eps' -painters -nocrop
%% Plot conductivity data 2D
type    = 'conductivity';
reconid = [254,213,312,211]; % reconstructions 
dnmapid = 0;         % true data
v       = [0,0,1];    % slice vector
h       = 0.005;       % stepsize
span    = [0.5,2];    % span of type
save    = 1;          % save or not


[ha, pos] = Plot2D(type, reconid, dnmapid, v, h, span, 0,'real');
%cb = colorbar();
%cb.Ruler.Exponent = 2;
%%
set(gcf, 'Renderer', 'painters');
export_fig 'all_noise_cond.eps' -painters -transparent -nocrop
%export_fig '1half3.eps' -transparent -nocrop
%% Plot q data 2D
type    = 'q';
reconid = 207; % reconstructions 
dnmapid = 0;         % true data
v       = [0,0,1];    % slice vector
h       = 0.01;       % stepsize
span    = [-2,5];    % span of type
save    = 1;          % save or not


[ha, pos] = Plot2D(type, reconid, dnmapid, v, h, span, 0,'real');
%export_fig 'Figures/qpcc.eps' -transparent -nocrop
%%
title('');
set(gca,'YTick',[])
set(gca,'XTick',[])
colorbar off
set(gca,'visible','off')
box off;
hold on
R = 10;
R1 = 15.8389;
v = linspace(0,2*pi,100);
xc = R*cos(v);
yc = R*sin(v);
xc1= R1*cos(v);
yc1 = R1*sin(v);
zc = 4;
plot3(xc,yc,zc*ones(100,1),'LineWidth',2);
plot3(xc1,yc1,zc*ones(100,1),'LineWidth',2);


%% Plot data 1D

type         = 'q';
comp_reconid = [9001,9002]';
include_true = [0];
comp_what    = {'ngrid'};
v            = [1,0,0];
center       = [0,0.3,0];
h            = 0.005;
span         = [-41,22];

ha = Plot1D(type,comp_reconid,include_true,comp_what,v,center,h,span,0);
xlim(ha(1), [-0.95,0.95]);
title(ha(1),'$q$, lineplot of peabrain reconstructions','Fontsize',16);
legend(ha(1),{'$J=15$, $\mathcal{N}=6$, $A=1/50$','$J=15$','$J=12$','$J=9$'},'interpreter','latex','location','northwest');

%%
export_fig 'Figures/2beautifullines.eps' -transparent -nocrop
%% Clean code
% choose among {commands, logs, alldata, dnmapdata, eitdata}

Clean('eitdata',1:7)